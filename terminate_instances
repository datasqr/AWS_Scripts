{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Install boto3</h2>\n",
    "\n",
    "pip install boto3\n",
    "\n",
    "Set up credentials:\n",
    "* create folder in /home/user/ named \".aws\" (/home/user/.aws). This folder is hidden\n",
    "* create file in folder .aws with name \"credentials\". Paste following lines. YOUR_KEY and YOUR_SECRET (http://docs.aws.amazon.com/general/latest/gr/getting-aws-sec-creds.html)\n",
    "\n",
    "    [default] <br/>\n",
    "    aws_access_key_id = YOUR_KEY <br/>\n",
    "    aws_secret_access_key = YOUR_SECRET <br/>\n",
    "\n",
    "\n",
    "* create file config and paste following lines\n",
    "\n",
    "    [default] <br/>\n",
    "    region=us-east-1 <br/>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i-0b1a440b440c50d6c t2.micro mzawsec3 172.31.24.207 ec2-13-58-145-114.us-east-2.compute.amazonaws.com /dev/sda1\n",
      "[{'DeviceName': '/dev/sda1', 'Ebs': {'AttachTime': datetime.datetime(2018, 1, 10, 22, 4, 28, tzinfo=tzutc()), 'DeleteOnTermination': True, 'Status': 'attached', 'VolumeId': 'vol-0330fa323b19f03c5'}}]\n",
      "i-0137ca957e738decf t2.micro mzawsec3 172.31.42.124 ec2-13-59-16-1.us-east-2.compute.amazonaws.com /dev/sda1\n",
      "[{'DeviceName': '/dev/sda1', 'Ebs': {'AttachTime': datetime.datetime(2018, 1, 11, 17, 53, 57, tzinfo=tzutc()), 'DeleteOnTermination': True, 'Status': 'attached', 'VolumeId': 'vol-03a14d2b340f62749'}}]\n"
     ]
    }
   ],
   "source": [
    "import boto3\n",
    "\n",
    "import boto3\n",
    "ec2 = boto3.resource('ec2')\n",
    "\n",
    "instances = ec2.instances.filter(\n",
    "    Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])\n",
    "instanceListNames = []\n",
    "attachedVolumes = []\n",
    "for instance in instances:\n",
    "    print(instance.id, instance.instance_type, instance.key_name, instance.private_ip_address, instance.public_dns_name ,instance.root_device_name)\n",
    "    instanceListNames.append(instance.id)\n",
    "    volumeId = instance.block_device_mappings\n",
    "    attachedVolumes.append(volumeId[0]['Ebs']['VolumeId'])\n",
    "    print(volumeId)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Check budget</h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a budget on AWS\n",
    "https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-create.html\n",
    "\n",
    "Check your accoutn id\n",
    "https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.152\n"
     ]
    }
   ],
   "source": [
    "client = boto3.client('budgets')\n",
    "response = client.describe_budget(\n",
    "    AccountId='310130539075',\n",
    "    BudgetName='BudgetInvestigation'\n",
    ")\n",
    "\n",
    "actualSpend = float(response['Budget']['CalculatedSpend']['ActualSpend']['Amount'])\n",
    "\n",
    "print(actualSpend)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "If limit is exceeded create a snapshot of EBS and skill all instances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "create snapshot\n",
      "['vol-0330fa323b19f03c5', 'vol-03a14d2b340f62749']\n",
      "kill all instances\n",
      "['i-0b1a440b440c50d6c', 'i-0137ca957e738decf']\n"
     ]
    }
   ],
   "source": [
    "if(actualSpend > 0):\n",
    "    print('create snapshot')\n",
    "    print(attachedVolumes)\n",
    "    '''\n",
    "    for volumeId in attachedVolumes:\n",
    "        ec2.create_snapshot(VolumeId=volumeId)\n",
    "    '''\n",
    "    print('kill all instances')\n",
    "    print(instanceListNames)\n",
    "   \n",
    "    ec2.instances.filter(InstanceIds=instanceListNames).stop()\n",
    "    ec2.instances.filter(InstanceIds=instanceListNames).terminate()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
